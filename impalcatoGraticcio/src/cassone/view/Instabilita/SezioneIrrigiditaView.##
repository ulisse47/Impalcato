package cassone.view.Instabilita;

/*
 * Created on 23-mar-2004
 * Andrea Cavalieri
 *
 */

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Toolkit;
import java.awt.geom.AffineTransform;
import java.awt.geom.Line2D;
import java.awt.geom.Rectangle2D;
import java.util.ArrayList;

import javax.swing.JPanel;
import javax.swing.border.EtchedBorder;
import javax.swing.border.TitledBorder;

import cassone.model.Concio;
import cassone.model.IrrigidimentoLongitudinale;
import cassone.model.Pannello;
import cassone.model.Progetto;
import cassone.model.Sezione;
import cassone.model.SezioniMetalliche.SezioneMetallicaDoppioT;

/**
 * @author Andrea
 * 
 * To change the template for this generated type comment go to
 * Window&gt;Preferences&gt;Java&gt;Code Generation&gt;Code and Comments
 */

public class SezioneIrrigiditaView extends JPanel {

	// trasformazione originale
	AffineTransform atOrigine;

	// variabili globali del progetto
	private int B, H, b0, b, h,be1,be2;

	private int Btot = 0;
	
	private int[] yg = new int[4];
	
	private int bs, ts, tw, hw, bi, ti;

	private boolean calcoloBeff;

	private double[] n = new double[5];

	// variabili di util
	private int Htot, dxAnima, Hcarp;

	// variabili di util grafica
	private double Bfinestra, Hfinestra;
	
	//valori instabilità
	private int ssLred,sLred,iiLred,iLred,ss1Lred,ss2Lred;
	private int ssred,sred,iired,ired,ss1red,ss2red;
	private int bef1,bef2,bsred,bired;

	private int FattoreScalaSpessori;

	// grafica
	private Color coloreSezioneAcciaio = Color.BLUE;

	private Color coloreCopella = Color.darkGray;

	private Color coloreSoletta = Color.lightGray;

	private Color coloreQuote = Color.RED;

	private Color[] coloreAssi = { Color.magenta, Color.cyan, Color.yellow,
			Color.green, Color.ORANGE };

	// utility grafica
	private int ddquote;
	//irrigidimenti
	private int b1,h1,b2,h2,h3,b3,h4,b4;
	private boolean i1compresso;
	private boolean i2compresso;
	
	
	private int y1,y2,y3,y4;
	private int nir;
	
	//private SezioneIrrigiditaView sezTipo;
	private static JPanel container; 
	
	private int ns;

	/**
	 * 
	 */
	public SezioneIrrigiditaView() {
		super();
		try {
			jbInit();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static JPanel getInstance() {
		
		if (container == null) {
			container = new JPanel();
			container.setLayout(new BorderLayout());
			container.setBorder(new TitledBorder(new EtchedBorder(
	    			EtchedBorder.RAISED, Color.white, Color.gray), "SEZIONE IRRIGIDITA"));   
			container.setBackground(Color.BLACK);
			container.add( new SezioneIrrigiditaView() );
		}
		return container;
	}

	/**
	 * The paint method provides the real magic. Here we cast the Graphics
	 * object to Graphics2D to illustrate that we may use the same old graphics
	 * capabilities with Graphics2D that we are used to using with Graphics.
	 */
	public void paintComponent(Graphics g) {
		super.paintComponents(g);

		try {

			// setBackground(Color.white);

			Graphics2D g2d = (Graphics2D) g;

			// salva la trasformazione originaria
			atOrigine = g2d.getTransform();

			// salva le variabili globali in variabili locali
			getVariabiliLocali();

			disegnaSezioneTipo(g2d);

		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	// salva le variabili del progetto in variabili private della
	// classe presente
	void getVariabiliLocali() {
/*
		Progetto prg = Progetto.getInstance();
		Sezione sezione = prg.getCurrentSezioneVerifica();
		SezioneMetallicaDoppioT concio =(SezioneMetallicaDoppioT) sezione.getSezioneMetallica();
		//tensioni efficaci
		//RIGA SELEZIONATA
		int row= 0;
		//nome combinazione selezionata
		//combinazione = prg.getCombinazioni().get(row).getName();
	     row = TableTensioniEfficaci.getInstance().getTable().getSelectedRow();
	     if(row==-1) row=0;
//		ParametriStaticiSezione ps = sezione.getParametriOut().get(row);
	     
		
		// piattabanda inferiore
		bi = Math.round((float )(concio.getBi()));
		ti = Math.round((float )concio.getTi());

		// anima
		tw = Math.round((float )concio.getTw());
		hw = Math.round((float )concio.getHw());

		// piattabanda superiore
		bs = Math.round((float )concio.getBs());
		ts = Math.round((float )concio.getTs());

		// utility
		Hcarp = ti + hw + ts;

		Htot = Hcarp;
		FattoreScalaSpessori = 1;
		
		//irrigidimenti
		ArrayList<IrrigidimentoLongitudinale> ir = sezione.getIrrigidimentiLong();
		ArrayList<IrrigidimentoLongitudinale> irc = ps.getIrrigidimentiCompressi(sezione);

		nir =ir.size(); 
		if (nir==1){
		
			IrrigidimentoLongitudinale i1=ir.get(0);
			Pannello p1=i1.getP1();
			Pannello p2=i1.getP2();
			b1=(int)p1.getB();
			h1=(int)p1.getH();
			b2=(int)p2.getB();
			h2=(int)p2.getH();
			y1 = (int)p1.getY();
			y2 = y1 +(int)p2.getB()/2-(int)p1.getH()/2;
			
			//è compresso?
			if (ps.getSigmaAtY(p1.getY(), concio.getHtot())>0) i1compresso=true;
			else i1compresso=false;
			
		}else if(nir==2){
			IrrigidimentoLongitudinale i1=ir.get(0);//nb sono tutti uguali come dimensione
			Pannello p1=i1.getP1();
			Pannello p2=i1.getP2();
			b1=Math.round((float )(p1.getB()));
			h1=Math.round((float )p1.getH());
			b2=Math.round((float )p2.getB());
			h2=Math.round((float )p2.getH());
			y1 = Math.round((float )p1.getY());
			y2 = y1 +Math.round((float )p2.getB()/2)-Math.round((float )p1.getH()/2);

			//è compresso?
			if (ps.getSigmaAtY(p1.getY(), concio.getHtot())>0) i1compresso=true;
			else i1compresso=false;

			IrrigidimentoLongitudinale i2=ir.get(1);
			 p1=i2.getP1();
			 p2=i2.getP2();
			b3=Math.round((float )p1.getB());
			h3=Math.round((float )p1.getH());
			b4=Math.round((float )p2.getB());
			h4=Math.round((float )p2.getH());
			y3 = Math.round((float )p1.getY());
			y4 = y3 +Math.round((float )p2.getB())/2-Math.round((float )p1.getH()/2);
			
			//è compresso?
			if (ps.getSigmaAtY(p1.getY(), concio.getHtot())>0) i2compresso=true;
			else i2compresso=false;

		}

		     
		//tensioni ridotte
		ns = irc.size(); //numero irrigidimenti compressi

		ps.calcolaTensioniEfficaci(prg.getCurrentSezioneVerifica(), prg.getMateriale());
		ssLred = Math.round((float )(ps.getSsred()));
		sLred=Math.round((float )(ps.getSred()));
		iLred = Math.round((float )(ps.getIred()));
		iiLred=Math.round((float )(ps.getIired()));
		bsred=Math.round((float )(ps.getBsred()));
		bired=Math.round((float )(ps.getBired()));

		if(ns==0){
			ss1Lred = Math.round((float )(ps.getSs1red()));
			ss2Lred = Math.round((float )(ps.getSs2red()));
				
			bef1=Math.round((float )(ps.getBef1()));
			bef2=Math.round((float )(ps.getBef2()));
		}else if(ns==2){
			
		}else if (ns==2) {
			
		}
*/
	}

	void disegnaTensioniRidotte (Graphics2D g2d){
		// imposta la scala della finestra;
		setFattoreDiScala(g2d);
	
		AffineTransform at = new AffineTransform();
		at.setToTranslation(Bfinestra/4, getYorigine());
		g2d.transform(at);
		g2d.setColor(Color.YELLOW);
	
		if(ns==0)
		{
		//linea verticale
		Line2D ln = new Line2D.Double(0, -ti/2, 0, -Hcarp+ts/2);
		g2d.draw(ln);
		//ss
		ln = new Line2D.Double(0, -Hcarp+ts/2, ssred, -Hcarp+ts/2);
		g2d.draw(ln);
		//s
//		ln = new Line2D.Double(ssred, -Hcarp, sred, -Hcarp+ts);
//		g2d.draw(ln);
		//s1red
		ln = new Line2D.Double(ssred, -Hcarp+ts/2, ss1red, -Hcarp+ts+bef1);
		g2d.draw(ln);
		ln = new Line2D.Double(ss1red, -Hcarp+ts+bef1, 0, -Hcarp+ts+bef1);
		g2d.draw(ln);
		
		//s2red
		ln = new Line2D.Double(0, -bef2-ti, ss2red, -bef2-ti);
		g2d.draw(ln);
		//i
		ln = new Line2D.Double(ss2red, -bef2-ti, iired, -Hcarp+ts+hw+ti/2);
		g2d.draw(ln);
		//ii
//		ln = new Line2D.Double(ss2red, -Hcarp+ts+hw+ti/2, iired, 0);
//		g2d.draw(ln);
		//linee orizzontali
//		ln = new Line2D.Double(0, -Hcarp+ts, sred, -Hcarp+ts);
//		g2d.draw(ln);
//		ln = new Line2D.Double(0, -Hcarp+ts+hw, ired, -Hcarp+ts+hw);
//		g2d.draw(ln);
		ln = new Line2D.Double(0, -ti/2, iired, -ti/2);
		g2d.draw(ln);
		}else{
			//linea verticale
			Line2D ln = new Line2D.Double(0, -ti/2, 0, -Hcarp+ts/2);
			g2d.draw(ln);
			//ss
			ln = new Line2D.Double(0, -Hcarp+ts/2, ssred, -Hcarp+ts/2);
			g2d.draw(ln);
			//s
//			ln = new Line2D.Double(ssred, -Hcarp, sred, -Hcarp+ts);
//			g2d.draw(ln);
			//i
//			ln = new Line2D.Double(sred, -Hcarp+ts, ired, -Hcarp+ts+hw);
//			g2d.draw(ln);
			//ii
			ln = new Line2D.Double(ssred, -Hcarp+ts/2, iired, -ti/2);
			g2d.draw(ln);
			//linee orizzontali
//			ln = new Line2D.Double(0, -Hcarp+ts, sred, -Hcarp+ts);
//			g2d.draw(ln);
//			ln = new Line2D.Double(0, -Hcarp+ts+hw, ired, -Hcarp+ts+hw);
//			g2d.draw(ln);
			ln = new Line2D.Double(0, -ti/2, iired, -ti/2);
			g2d.draw(ln);		
		
		}
		
		//scritte
		String str1 = "ss=" + Integer.toString(ssLred) +" MPa" ;
//		String str2 = "s=" + Integer.toString(sLred)+" MPa" ;
//		String str3 = "i=" + Integer.toString(iLred)+" MPa" ;
		String str4 = "ii=" + Integer.toString(iiLred)+" MPa" ;
		
		Font fn = new Font("Arial", 0, (int) (ddquote * 1.8));
		g2d.setFont(fn);

		FontMetrics metrics = g2d.getFontMetrics();
		int tW = metrics.stringWidth(str1);
		
		g2d.drawString(str1, ssred/2-tW/2, -Hcarp-ddquote);
//		g2d.drawString(str2, sred/2-tW/2, -Hcarp+2*ddquote+ts);
//		g2d.drawString(str3, ired/2-tW/2, -Hcarp-ddquote+ts+hw);
		g2d.drawString(str4, iired/2-tW/2, 2*ddquote);

		
	}
	
	// imposta il fattore di scala della classe AffineTransform at
	void setFattoreDiScala(Graphics2D g) {

		double fx, fy, W = 0, H = 0;
		double xOrig = 0, Yorig = 0;


		setOriginalTrasformation(g);

		AffineTransform at = new AffineTransform();

		W = getWidth();
		H = getHeight();

		Btot = Math.max(bs, bi);

		fx = Math.min((W) / (Btot * 1.10), (H) / (Htot * 1.15));
		fy = fx;

		xOrig = W / 2;
		Yorig = H / 2;
		
		Bfinestra= W/fx;

		// imposta grafica
		at.setToTranslation(xOrig, Yorig);
		g.transform(at);
		at.setToScale(fx, fy);
		g.transform(at);

		// variabili di utilit� grafica
		Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
		ddquote = (int) (screenSize.width / 220 / fy);
		
		double fTensioni = Math.abs((Bfinestra/4)/(Math.max(Math.abs(ssLred*1.05), Math.abs(iiLred*1.05))));
		
		ssred = (int)(ssLred*fTensioni);
		sred = (int)(sLred*fTensioni);
		ired = (int)(iLred*fTensioni);
		iired = (int)(iiLred*fTensioni);
		ss1red = (int)(ss1Lred*fTensioni);
		ss2red = (int)(ss2Lred*fTensioni);
	}

	// disegna il cassone completo
	void disegnaSezioneTipo(Graphics2D g2d) {
		
		disegnaCarpenteriaMetallica(g2d);
		disegnaIrrigidimenti(g2d);
		disegnaTensioniRidotte(g2d);
	//	disegnaSoletta(g2d);
		quota(g2d);
	}

	
	void disegnaIrrigidimenti(Graphics2D g2d) {
	
		setFattoreDiScala(g2d);

		AffineTransform at = new AffineTransform();
		at.setToTranslation(-Bfinestra / 4, getYorigine()-Hcarp);
		g2d.transform(at);
		
		if(nir>0){
			
		//è un irrigidimento compresso?
		if (i1compresso)g2d.setColor(coloreSezioneAcciaio);
		else g2d.setColor(Color.gray);
		
		Rectangle2D r = new Rectangle2D.Double(tw / 2*FattoreScalaSpessori, y1-h1*FattoreScalaSpessori/2, 
				b1, h1 * FattoreScalaSpessori);
		g2d.fill(r);
		r = new Rectangle2D.Double(tw / 2*FattoreScalaSpessori+b1-h2, y2-b2/2/*-h1/2*FattoreScalaSpessori*/, 
				h2, b2 * FattoreScalaSpessori);
		g2d.fill(r);}

		if(nir>1){
			
			//è un irrigidimento compresso?
			if (i2compresso) g2d.setColor(coloreSezioneAcciaio);
			else g2d.setColor(Color.gray);
			
			Rectangle2D r = new Rectangle2D.Double(tw / 2*FattoreScalaSpessori, y3-h3*FattoreScalaSpessori/2, 
					b3, h3 * FattoreScalaSpessori);
			g2d.fill(r);
			r = new Rectangle2D.Double(tw / 2*FattoreScalaSpessori+b3-h4, y4-b4/2/*-h3/2*FattoreScalaSpessori*/, 
					h4, b4 * FattoreScalaSpessori);
			g2d.fill(r);}
		
	}	
	
	void disegnaCarpenteriaMetallica(Graphics2D g2d){
		
		// imposta la scala della finestra;
		setFattoreDiScala(g2d);

		AffineTransform at = new AffineTransform();
		at.setToTranslation(-Bfinestra/4, getYorigine());
		g2d.transform(at);

		// disegna l'ala inferiore
		int dl = (bi-bired)/2;
		Rectangle2D sInf1 = new Rectangle2D.Double(-dl-bired/2 , -ti
				* FattoreScalaSpessori, dl, ti * FattoreScalaSpessori);
		Rectangle2D sInf2 = new Rectangle2D.Double(-bired/2, -ti
				* FattoreScalaSpessori, bired, ti * FattoreScalaSpessori);
		Rectangle2D sInf3 = new Rectangle2D.Double(bired/2, -ti
				* FattoreScalaSpessori, dl, ti * FattoreScalaSpessori);	
		g2d.setColor(coloreSezioneAcciaio);
		g2d.fill(sInf2);
		g2d.setColor(Color.gray);
		g2d.fill(sInf1);
		g2d.fill(sInf3);
		
		// disegna l'ala superiore
		dl = (bs-bsred)/2;
		Rectangle2D sup1 = new Rectangle2D.Double(-dl-bsred/2 , -Hcarp
				, dl, ts * FattoreScalaSpessori);
		Rectangle2D sup2 = new Rectangle2D.Double(-bsred/2, -Hcarp, 
				bsred, ts * FattoreScalaSpessori);
		Rectangle2D sup3 = new Rectangle2D.Double(bsred/2, -Hcarp
				, dl, ts * FattoreScalaSpessori);	
		g2d.setColor(coloreSezioneAcciaio);
		g2d.fill(sup2);
		g2d.setColor(Color.gray);
		g2d.fill(sup1);
		g2d.fill(sup3);
		
		if (nir==0) disegnaAnimaNoIrrigidimenti(g2d);
		if (nir==1) disegnaAnimaUnIrrigidimento(g2d);
		if (nir==2) disegnaAnimaDueIrrigidimenti(g2d);
		
	}
	
	// disegna la carpenteria metallica
	void disegnaAnimaDueIrrigidimenti(Graphics2D g2d) {

		// imposta la scala della finestra;
		setFattoreDiScala(g2d);

		AffineTransform at = new AffineTransform();
		at.setToTranslation(-Bfinestra/4, getYorigine());
		g2d.transform(at);
		Rectangle2D s = new Rectangle2D.Double(-tw*FattoreScalaSpessori , -Hcarp+ts*FattoreScalaSpessori
				, tw*FattoreScalaSpessori , hw);
		g2d.setColor(coloreSezioneAcciaio);
		g2d.fill(s);
	}
	
	// disegna la carpenteria metallica
	void disegnaAnimaUnIrrigidimento(Graphics2D g2d) {

		// imposta la scala della finestra;
		setFattoreDiScala(g2d);

		AffineTransform at = new AffineTransform();
		at.setToTranslation(-Bfinestra/4, getYorigine());
		g2d.transform(at);
		
		Rectangle2D ala1 = new Rectangle2D.Double(-tw / 2
				* FattoreScalaSpessori, -Hcarp+ts*FattoreScalaSpessori, tw * FattoreScalaSpessori,
				hw);
		g2d.setColor(coloreSezioneAcciaio);
		g2d.fill(ala1);
		
	}
	
	// disegna la carpenteria metallica
	void disegnaAnimaNoIrrigidimenti(Graphics2D g2d) {

		// disegna le amime
		int dw = hw-bef1-bef2;
		Rectangle2D ala1 = new Rectangle2D.Double(-tw / 2
				* FattoreScalaSpessori, -Hcarp+ts*FattoreScalaSpessori, tw * FattoreScalaSpessori,
				bef1);
		// disegna le amime
		Rectangle2D ala2 = new Rectangle2D.Double(-tw / 2
				* FattoreScalaSpessori, -Hcarp+ts*FattoreScalaSpessori+bef1, tw * FattoreScalaSpessori,
				dw);
		// disegna le amime
		Rectangle2D ala3 = new Rectangle2D.Double(-tw / 2
				* FattoreScalaSpessori, -ti*FattoreScalaSpessori-bef2, tw * FattoreScalaSpessori,
				bef2);
		g2d.setColor(coloreSezioneAcciaio);
		g2d.fill(ala1);
		g2d.fill(ala3);
		g2d.setColor(Color.gray);
		g2d.fill(ala2);
		
		//quote
		setFattoreDiScala(g2d);
		AffineTransform at = new AffineTransform();
		at.setToTranslation(-Bfinestra / 4-bs/2-2*ddquote, getYorigine() - Hcarp);
		g2d.transform(at);
		at.setToRotation(Math.PI / 2);
		g2d.transform(at);
		int dl = hw-bef1-bef2;
		g2d.setColor(coloreQuote);
		if(dl>0){ 
			disegnaQuotaTraDuePunti(ts, bef1+ts, "", ddquote, g2d);
			disegnaQuotaTraDuePunti(ts+bef1, bef1+ts+dl, "", ddquote, g2d);
			disegnaQuotaTraDuePunti(ts+bef1+dl, hw+ts, "", ddquote, g2d);
		}
		
	}


// disegna le quote
	void quota(Graphics2D g2d) {

		//imposto la finestra
		setOriginalTrasformation(g2d);
		setFattoreDiScala(g2d);
		g2d.setColor(coloreQuote);
		
		//quota soletta
		//prima fila orizzonate di quote superiori
		AffineTransform at = new AffineTransform();
		at.setToTranslation(-Bfinestra / 4-bs/2-2*ddquote, getYorigine() - Hcarp);
		g2d.transform(at);
		at.setToRotation(Math.PI / 2);
		g2d.transform(at);
		if (nir>0)disegnaQuotaTraDuePunti(0, y1, "", ddquote, g2d);
		at.setToTranslation(0, 3*ddquote);
		g2d.transform(at);
		if (nir>1)disegnaQuotaTraDuePunti(0, y3, "", ddquote, g2d);
		


/*		if(h!=0){
			at.setToTranslation(0, -4 * ddquote);
			g2d.transform(at);
			disegnaQuotaTraDuePunti(Hcarp, Hcarp + h, "", ddquote, g2d);
		}
		at.setToTranslation(0, 8 * ddquote);
		g2d.transform(at);
		disegnaQuotaTraDuePunti(0, Hcarp + h+H, "", ddquote, g2d);

		
		// spessori piattabande
		setFattoreDiScala(g2d);
		at.setToTranslation(Bfinestra / 2 + bi / 4, getYorigine());
		g2d.transform(at);
		// spessore paittabanda inferiore
		Line2D ln = new Line2D.Double(0, 0, ddquote, 3 * ddquote);
		Drawing.leader(0, 0, 0, 2 * ddquote, 2 * ddquote, "sp.="
				+ Integer.toString(ti) + "mm", g2d);
		// anima
		at = new AffineTransform();
		at.setToTranslation(-bi / 4, 0);
		g2d.transform(at);
		ln.setLine(0, -Hcarp / 2, 0 + Hcarp / 7, -Hcarp / 2);
		g2d.draw(ln);
		g2d.drawString("sp.=" + Integer.toString(tw) + " mm", Hcarp / 7,
				-Hcarp / 2);

		//superiore
		setFattoreDiScala(g2d);
		at = new AffineTransform();
		at.setToTranslation(Bfinestra / 2 + bs / 2.5, getYorigine()-Hcarp + ts);
		g2d.transform(at);
		Drawing.leader(0, 0, 0, 2 * ddquote, 2 * ddquote, "sp.="
				+ Integer.toString(ts) + "mm", g2d);
*/
	}

	// disegna una quota tra due punti x1 e x2
	// se non si mette la stringa della quota calcola la differenza
	// tra x1 e x2
	void disegnaQuotaTraDuePunti(int x1, int x2, String quota, int dd,
			Graphics2D g2d) {

		int dx = Math.abs(x2 - x1);
		if (quota == "")
			quota = Integer.toString(dx);

		Line2D ln = new Line2D.Double();
		// linea principale
		ln.setLine(x1 - dd, 0, x2 + dd, 0);
		g2d.draw(ln);
		// linea di estensione
		ln.setLine(x1 + dd, dd, x1 - dd, -dd);
		g2d.draw(ln);
		ln.setLine(x2 + dd, dd, x2 - dd, -dd);
		g2d.draw(ln);
		ln.setLine(x1, dd, x1, -dd);
		g2d.draw(ln);
		ln.setLine(x2, dd, x2, -dd);
		g2d.draw(ln);

		Font fn = new Font("Arial", 0, (int) (ddquote * 1.8));
		g2d.setFont(fn);

		FontMetrics metrics = g2d.getFontMetrics();
		int tW = metrics.stringWidth(quota);
		if (dx > tW) {
			g2d.drawString(quota, x2 / 2 + x1 / 2 - tW / 2, -ddquote / 2);
		} else {
			g2d.drawString(quota, Math.max(x2, x1) + ddquote, 0);
		}

	}

	void setOriginalTrasformation(Graphics2D g) {
		g.setTransform(atOrigine);
	}

	// restituisce la posizione dell'intradosso piattabanda inferiore rispetto
	// al bordo
	// superiore della finestra
	private int getYorigine() {
		return (int)(0.5*Htot );
	}

	private void jbInit() throws Exception {
		this.setMinimumSize(new Dimension(100, 100));
		this.setVerifyInputWhenFocusTarget(true);
	}
}
